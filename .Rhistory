logCampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
##histogram of camp size logarithm
hist(logCampSize)
mean(logCampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000 #number of bootstrap statistics
boot.dist = rep(1, b)
for (i in 1:b) {
boot.sample = sample(totalFox, replace=TRUE)
boot.dist[i] = log(boot.sample)
}
##natural logarithm of the total species count per camp
logCampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
##histogram of camp size logarithm
hist(logCampSize)
mean(logCampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000 #number of bootstrap statistics
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(totalFox, replace=TRUE)
boot.dist[i] = log(boot.sample)
}
hist(boot.dist)
l=length(logCampSize)
b = 10000 #number of bootstrap statistics
##natural logarithm of the total species count per camp
logCampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
##histogram of camp size logarithm
hist(logCampSize)
mean(logCampSize)
##boot strap of mean camp size logarithm
l=length(logCampSize)
##Generating a Bootstrap Distribution
b = 10000 #number of bootstrap statistics
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(l, replace=TRUE)
boot.dist[i] = log(boot.sample)
}
hist(boot.dist)
##natural logarithm of the total species count per camp
logCampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
##histogram of camp size logarithm
hist(logCampSize)
mean(logCampSize)
##boot strap of mean camp size logarithm
l=length(logCampSize)
##Generating a Bootstrap Distribution
b = 10000 #number of bootstrap statistics
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(l, replace=TRUE)
boot.dist[i] = mean(logCampSize[boot.sample])
}
hist(boot.dist)
##natural logarithm of the total species count per camp
logCampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
##histogram of camp size logarithm
hist(logCampSize)
mean(logCampSize)
##boot strap of mean camp size logarithm
l=length(logCampSize)
##Generating a Bootstrap Distribution
b = 10000 #number of bootstrap statistics
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(b, replace=TRUE)
boot.dist[i] = mean(logCampSize[boot.sample])
}
hist(boot.dist)
##natural logarithm of the total species count per camp
logCampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
##histogram of camp size logarithm
hist(logCampSize)
mean(logCampSize)
##boot strap of mean camp size logarithm
l=length(logCampSize)
##Generating a Bootstrap Distribution
b = 10000 #number of bootstrap statistics
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(logCampSize, replace=TRUE)
boot.dist[i] = mean(boot.sample)
}
hist(boot.dist)
##natural logarithm of the total species count per camp
logCampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
##histogram of camp size logarithm
hist(logCampSize)
mean(logCampSize)
##boot strap of mean camp size logarithm
l=length(logCampSize)
##Generating a Bootstrap Distribution
b = 10000 #number of bootstrap statistics
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(logCampSize, replace=TRUE)
boot.dist[i] = mean(boot.sample)
}
hist(boot.dist)
plot(boot.dist)
boot.dist
mean(logCampSize)
hist(logCampSize)
mean(log(totalFox))
hist(logCampSize)
##natural logarithm of the total species count per camp
log.CampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
##histogram of camp size logarithm
hist(logCampSize)
##boot strap of mean camp size logarithm
l=length(log.CampSize)
##Generating a Bootstrap Distribution
b = 1000 #number of bootstrap statistics
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample = sample(log.CampSize, replace=TRUE)
boot.dist[i] = mean(boot.sample)
}
boot.dist
##natural logarithm of the total species count per camp
log.CampSize = log(totalFox)
b = 10000 #number of bootstrap statistics
dog.dist = rep(0, b)
for (i in 1:b) {
dog.dist[i] = rbinom(1,25,.5)/25
}
hist(dog.dist)
##natural logarithm of the total species count per camp
log.CampSize = log(totalFox)
#load the data from csv
foxData = read.csv("FlyingFoxMonitoring.csv",header = TRUE)
#converting factor to integer
blkFox <- suppressWarnings(c(as.numeric(as.character(foxData$BlackFlyingFox.Count))))
redFox<- suppressWarnings(c(as.numeric(as.character(foxData$LittleRedFlyingFox.Count))))
greyFox<- suppressWarnings(c(as.numeric(as.character(foxData$GreyHeadedFlyingFox.Count))))
totalFox <- suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))
#remove rows where variable FlyingFoxesAbsent does not match the total count being zero or not.
idHasFox=which(foxData$FlyingFoxesAbsent!=TRUE)
idHasNoFox=which(suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))!=0)
illogicalFox=setdiff(idHasFox,idHasNoFox)
blkFox=blkFox[-illogicalFox]
redFox=redFox[-illogicalFox]
greyFox=greyFox[-illogicalFox]
totalFox=totalFox[-illogicalFox]
##removing data with NA
#make a vector of the rows which have missing data
idNA=c(which(is.na(blkFox)),which(is.na(redFox)),which(is.na(greyFox)),which(is.na(totalFox)))
paste(length(idNA),"cases have NAs")
#remove those rows
blkFox=blkFox[-idNA]
redFox=redFox[-idNA]
greyFox=greyFox[-idNA]
totalFox=totalFox[-idNA]
#calculate totals based on each species
myTotal = blkFox+redFox+greyFox
diffTotals = totalFox-myTotal
#make a vector where if the difference between the actual total and the sum of each species doesn't match the value is NA and if it does it's "good"
idBadMath=ifelse(diffTotals!=0,NA,"good")
paste(sum(is.na(idBadMath)),"rows have totals that dont match the sum of each species")
#making a vecor of the NAs (which are actually the rows with bad maths)
idBadMath=which(is.na(idBadMath))
#removing the rows that have bad maths
blkFox=blkFox[-idBadMath]
redFox=redFox[-idBadMath]
greyFox=greyFox[-idBadMath]
totalFox=totalFox[-idBadMath]
##natural logarithm of the total species count per camp
log.CampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
##histogram of camp size logarithm
hist(logCampSize)
#load the data from csv
foxData = read.csv("FlyingFoxMonitoring.csv",header = TRUE)
#converting factor to integer
blkFox <- suppressWarnings(c(as.numeric(as.character(foxData$BlackFlyingFox.Count))))
redFox<- suppressWarnings(c(as.numeric(as.character(foxData$LittleRedFlyingFox.Count))))
greyFox<- suppressWarnings(c(as.numeric(as.character(foxData$GreyHeadedFlyingFox.Count))))
totalFox <- suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))
#remove rows where variable FlyingFoxesAbsent does not match the total count being zero or not.
idHasFox=which(foxData$FlyingFoxesAbsent!=TRUE)
idHasNoFox=which(suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))!=0)
illogicalFox=setdiff(idHasFox,idHasNoFox)
blkFox=blkFox[-illogicalFox]
redFox=redFox[-illogicalFox]
greyFox=greyFox[-illogicalFox]
totalFox=totalFox[-illogicalFox]
##removing data with NA
#make a vector of the rows which have missing data
idNA=c(which(is.na(blkFox)),which(is.na(redFox)),which(is.na(greyFox)),which(is.na(totalFox)))
paste(length(idNA),"cases have NAs")
#remove those rows
blkFox=blkFox[-idNA]
redFox=redFox[-idNA]
greyFox=greyFox[-idNA]
totalFox=totalFox[-idNA]
#calculate totals based on each species
myTotal = blkFox+redFox+greyFox
diffTotals = totalFox-myTotal
#make a vector where if the difference between the actual total and the sum of each species doesn't match the value is NA and if it does it's "good"
idBadMath=ifelse(diffTotals!=0,NA,"good")
paste(sum(is.na(idBadMath)),"rows have totals that dont match the sum of each species")
#making a vecor of the NAs (which are actually the rows with bad maths)
idBadMath=which(is.na(idBadMath))
#removing the rows that have bad maths
blkFox=blkFox[-idBadMath]
redFox=redFox[-idBadMath]
greyFox=greyFox[-idBadMath]
totalFox=totalFox[-idBadMath]
##natural logarithm of the total species count per camp
log.CampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000 #number of bootstrap statistics
boot.dist = rep(0, b)
for (i in 1:b) {
boot.dist[i] = mean(log.CampSize)
}
hist(boot.dist)
totalFox.length=length(totalFox)
##natural logarithm of the total species count per camp
log.CampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
totalFox.length=length(totalFox)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000 #number of bootstrap statistics
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample =(totalFox.length, replace=TRUE)
boot.sample =sample(totalFox.length, replace=TRUE)
boot.dist[i] = mean(log.CampSize)
##natural logarithm of the total species count per camp
log.CampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
totalFox.length=length(totalFox)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000 #number of bootstrap statistics
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample =sample(totalFox.length, replace=TRUE)
rand.dist[i] = mean(log.CampSize[boot.sample])
}
##natural logarithm of the total species count per camp
log.CampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
totalFox.length=length(totalFox)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000 #number of bootstrap statistics
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample =sample(totalFox.length, replace=TRUE)
boot.dist[i] = mean(log.CampSize[boot.sample])
}
hist(boot.dist)
#load the data from csv
foxData = read.csv("FlyingFoxMonitoring.csv",header = TRUE)
#converting factor to integer
blkFox <- suppressWarnings(c(as.numeric(as.character(foxData$BlackFlyingFox.Count))))
redFox<- suppressWarnings(c(as.numeric(as.character(foxData$LittleRedFlyingFox.Count))))
greyFox<- suppressWarnings(c(as.numeric(as.character(foxData$GreyHeadedFlyingFox.Count))))
totalFox <- suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))
#remove rows where variable FlyingFoxesAbsent does not match the total count being zero or not.
idHasFox=which(foxData$FlyingFoxesAbsent!=TRUE)
idHasNoFox=which(suppressWarnings(c(as.numeric(as.character(foxData$TotalSpecies.Count))))!=0)
illogicalFox=setdiff(idHasFox,idHasNoFox)
blkFox=blkFox[-illogicalFox]
redFox=redFox[-illogicalFox]
greyFox=greyFox[-illogicalFox]
totalFox=totalFox[-illogicalFox]
##removing data with NA
#make a vector of the rows which have missing data
idNA=c(which(is.na(blkFox)),which(is.na(redFox)),which(is.na(greyFox)),which(is.na(totalFox)))
paste(length(idNA),"cases have NAs")
#remove those rows
blkFox=blkFox[-idNA]
redFox=redFox[-idNA]
greyFox=greyFox[-idNA]
totalFox=totalFox[-idNA]
#calculate totals based on each species
myTotal = blkFox+redFox+greyFox
diffTotals = totalFox-myTotal
#make a vector where if the difference between the actual total and the sum of each species doesn't match the value is NA and if it does it's "good"
idBadMath=ifelse(diffTotals!=0,NA,"good")
paste(sum(is.na(idBadMath)),"rows have totals that dont match the sum of each species")
#making a vecor of the NAs (which are actually the rows with bad maths)
idBadMath=which(is.na(idBadMath))
#removing the rows that have bad maths
blkFox=blkFox[-idBadMath]
redFox=redFox[-idBadMath]
greyFox=greyFox[-idBadMath]
totalFox=totalFox[-idBadMath]
##natural logarithm of the total species count per camp
log.CampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
totalFox.length=length(totalFox)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000 #number of bootstrap statistics
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample =sample(totalFox.length, replace=TRUE)
boot.dist[i] = mean(log.CampSize[boot.sample])
}
hist(boot.dist)
##natural logarithm of the total species count per camp
log.CampSize = log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
totalFox.length=length(totalFox)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000 #number of bootstrap statistics
boot.dist = rep(0, b)
for (i in 1:b) {
boot.sample =sample(totalFox.length, replace=TRUE)
boot.dist[i] = log(boot.sample)
}
##natural logarithm of the total species count per camp
log.CampSize=log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
totalFox.length=length(totalFox)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(totalFox.length, replace=TRUE)
boot.dist[i] = mean(log.CampSize[boot.sample])
}
boot.dist = log(boot.sample)
boot.sample = sample(NA, replace=TRUE)
##natural logarithm of the total species count per camp
log.CampSize=log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
totalFox.length=length(totalFox)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(NA, replace=TRUE)
}
boot.dist = log(boot.sample)
##natural logarithm of the total species count per camp
log.CampSize=log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
totalFox.length=length(totalFox)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(b, replace=TRUE)
}
boot.dist = log(boot.sample)
##natural logarithm of the total species count per camp
log.CampSize=log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
totalFox.length=length(totalFox)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(b, replace=TRUE)
}
boot.dist = log(boot.sample)
hist(boot.dist)
mean(boot.dist)
boot.dist = mean(log(boot.sample))
##natural logarithm of the total species count per camp
log.CampSize=log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
totalFox.length=length(totalFox)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(b, replace=TRUE)
boot.dist=log(boot.sample)
boot.dist=mean(boot.dist)
}
boot.dist = log(boot.sample)
mean(boot.dist)
##natural logarithm of the total species count per camp
log.CampSize=log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
totalFox.length=length(totalFox)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(b, replace=TRUE)
boot.dist=log(boot.sample)
}
#boot.dist = log(boot.sample)
mean(boot.dist)
host(boot.dist)
##natural logarithm of the total species count per camp
log.CampSize=log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
totalFox.length=length(totalFox)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(b, replace=TRUE)
boot.dist=log(boot.sample)
}
#boot.dist = log(boot.sample)
host(boot.dist)
hist(boot.dist)
##natural logarithm of the total species count per camp
log.CampSize=log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
totalFox.length=length(totalFox)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(b, replace=TRUE)
boot.dist=log(boot.sample)-4
}
#boot.dist = log(boot.sample)
hist(boot.dist)
##natural logarithm of the total species count per camp
log.CampSize=log(totalFox)
#paste(totalFox,logCampSize)
#logCampSize
totalFox.length=length(totalFox)
##histogram of camp size logarithm
hist(log.CampSize)
##boot strap of mean camp size logarithm
##Generating a Bootstrap Distribution
b = 10000
boot.dist = rep(NA, b)
for (i in 1:b) {
boot.sample = sample(b, replace=TRUE)
boot.dist=log(boot.sample)
}
#boot.dist = log(boot.sample)
hist(boot.dist)
mean(boot.dist >= log.CampSize)
